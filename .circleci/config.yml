# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2

# We use the machine executor because our dev_db.sh uses docker to run
# a fixed postgres version. Additionally, if we wanted to use docker
# for builds we'd need to setup a custom lein+npm+postgres image and
# publish it on docker hub. Maybe some day.

defaults: &defaults
  machine:
    image: ubuntu-1604:201903-01
  working_directory: ~/repo
  environment:
    LEIN_ROOT: "true"
    # Customize the JVM maximum heap limit
    JVM_OPTS: -Xmx3200m

docker: &docker
  executor: docker
  docker:
    - image: circleci/clojure:openjdk-11-lein-2.9.3-node-browsers


jobs:
  build:
    <<: *docker
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "project.clj" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-

      # upgrade node
      # TODO: could upgrade node using NVM but it seems poorly documented and a hassle
      #- run: sudo rm /opt/circleci/.nvm/versions/node/v6.1.0/bin/node
      #- run: curl -sL https://deb.nodesource.com/setup_13.x | sudo bash -
      #- run: sudo apt install nodejs

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
            # node_modules won't pick up updates to sub dependencies
            # unless the project.clj is changed. This might create differences
            # between dev, CI and actual deployment.
            - node_modules
          key: v2-dependencies-{{ checksum "project.clj" }}

  without-db:
    <<: *docker
    steps:
      - checkout
      # TODO cache restore puts stuff in the wrong directories due to the build step being non-docker
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "project.clj" }}
      # verify that we can run unit tests without the database:
      - run: DATABASE_URL=invalid lein kaocha --reporter kaocha.report/documentation unit
      - store_test_results:
          path: target/test-results

  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "project.clj" }}
      # dl.google.com new apt key isn't trusted by the image
      - run: curl https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
      # killall is a workaround for apt failing with: Could not get lock /var/lib/apt/lists/lock
      - run: sudo killall -9 apt-get || true; sudo apt update

      # upgrade chromedriver and node
      - run: sudo apt remove google-chrome-stable
      # remove conflicting versions installed by circle
      # TODO: could upgrade node using NVM but it seems poorly documented and a hassle
      - run: sudo rm /usr/local/bin/chromedriver /opt/circleci/.nvm/versions/node/v6.1.0/bin/node
      - run: curl -sL https://deb.nodesource.com/setup_13.x | sudo bash -
      - run: sudo apt install chromium-chromedriver nodejs

      - run: FOR_TESTS=1 ./dev_db.sh
      - run: lein cljtests-ci
      - store_test_results:
          path: target/test-results
      - store_artifacts:
          path: browsertest-errors
      - store_artifacts:
          path: browsertest-downloads

  doo:
    <<: *docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "project.clj" }}
      - run: lein deps # just in case cache fails
      - run: lein doo chrome-headless test once
      - store_test_results:
          path: target/test-results

  war:
    <<: *docker
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "project.clj" }}
      - run: lein uberwar
      - store_artifacts:
          path: target/uberjar/rems.war
      - run: lein uberjar
      - store_artifacts:
          path: target/uberjar/rems.jar
      - persist_to_workspace:
          root: .
          paths:
            - target/uberjar/rems.jar

  docker-snapshot:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: .circleci/docker.sh circle

  docker-release:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: .circleci/docker.sh release

  rahti-dev:
    <<: *defaults
    steps:
      - checkout
      - run: .circleci/rahti-deploy.sh dev

  rahti-demo:
    <<: *defaults
    steps:
      - checkout
      - run: .circleci/rahti-deploy.sh demo

  # pseudo job to post a single ok status to github after all the tests
  ok:
    executor: docker
    docker:
      - image: alpine
    steps:
      - run: 'true'

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - without-db:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - doo:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - war:
          requires:
            - build
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
      - docker-snapshot:
          requires:
            - build
            - war
          filters:
            branches:
              only:
                - master
      - docker-release:
          requires:
            - build
            - war
          filters:
            tags:
              only: /v[0-9]\.[0-9].*/
            branches:
              ignore: /.*/
      - rahti-dev:
          requires:
            - build
            - war
          filters:
            branches:
              only:
                - master
      - rahti-demo:
          requires:
            - build
            - war
          filters:
            tags:
              only: /v[0-9]\.[0-9].*/
            branches:
              ignore: /.*/
      - ok:
          requires:
            - build
            - without-db
            - test
            - doo
            - war
          filters:
            tags:
              only: /.*/
